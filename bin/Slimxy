#!/usr/bin/env php
<?php
use Slim\Http\Environment;
require __DIR__.'/../vendor/autoload.php';
#slim
$dotenv = new Dotenv\Dotenv(__DIR__.'/../');
$dotenv->load();
$container = new \Core\Containers();
$app = new \Slim\App($container->GetContainers());
require __DIR__.'/../routes.php';
const SW_PORT = 8888;
$http_server = new \Swoole\Http\Server('0.0.0.0',SW_PORT,SWOOLE_PROCESS,SWOOLE_SOCK_TCP);
$http_server->set(array(
                      'daemonize'=> false,    //守护进程化 true/false
                      'reactor_num' => 2,    //reactor thread num
                      'worker_num' => 4,    //Swoole采用固定Worker进程的模式
                      'backlog' => 128,    //此参数将决定最多同时有多少个等待accept的连接。
                      'max_request' => 2000,
                      'enable_coroutine'=>true,
                      'dispatch_mode' => 1, // 1平均分配，2按FD取模固定分配，3抢占式分配，默认为取模(dispatch=2)
                      'log_level' => 0,
                      'log_file' => '../logs/swoole.log'
                  ));
$http_server->on('WorkerStart', function ($serv, $worker_id){
    global $argv;

});
$http_server->on("start", function ($server) {
    echo "Slimxy http server is started at http://0.0.0.0:".SW_PORT."\n";
});
$http_server->on("request", function ($request, $response) use ($app) {

    $slimRequest = \Slim\Http\Request::createFromEnvironment(
        new \Slim\Http\Environment([
                                       'SERVER_PROTOCOL' => 'HTTP/1.1',
                                       'REQUEST_METHOD' => $request->server['request_method'],
                                       'REQUEST_URI' => $request->server['request_uri'],
                                       'SERVER_PORT' => $request->server['server_port'],
                                       'HTTP_ACCEPT' => $request->header['accept'],
                                       'HTTP_USER_AGENT' => $request->header['user-agent']
                                   ])
    );

    $body = new \Slim\Http\Body(fopen('php://temp', 'w'));
    $body->write($request->rawContent());
    $body->rewind();
    $slimRequest = $slimRequest->withBody($body);

    $processedResponse = $app->process($slimRequest, new Slim\Http\Response());

    // Set all the headers you will find in $processedResponse into swoole's $response
    $response->header("foo", "bar");

    // Set the body
    $response->end((string) $processedResponse->getBody());

});
$http_server->start();